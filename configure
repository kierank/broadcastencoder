#!/bin/bash

if test x"$1" = x"-h" -o x"$1" = x"--help" ; then

echo "Usage: ./configure [options]"
echo ""
echo "available options:"
echo ""
echo "  --help                   print this message"
echo "  --enable-debug           adds -g, doesn't strip"
echo "  --enable-pic             position independant code"
echo "  --extra-asflags=EASFLAGS add EASFLAGS to ASFLAGS"
echo "  --extra-cflags=ECFLAGS   add ECFLAGS to CFLAGS"
echo "  --extra-ldflags=ELDFLAGS add ELDFLAGS to LDFLAGS"
echo "  --host=HOST              build programs to run on HOST"
echo "  --cross-prefix=PREFIX    use PREFIX for compilation tools"
echo "  --sysroot=SYSROOT        root of cross-build tree"
echo ""
echo "input"
echo ""
echo "  --disable-decklink       disable support for decklink input"
echo "  --disable-lavf           disable support for libavformat"
echo ""
echo "audio encoding:"
echo ""
echo "  --disable-twolame        disable support for twolame"
echo ""
exit 1
fi

log_check() {
    echo -n "checking $1... " >> config.log
}

log_ok() {
    echo "yes" >> config.log
}

log_fail() {
    echo "no" >> config.log
}

log_msg() {
    echo "$1" >> config.log
}

cc_check() {
    if [ -z "$3" ]; then
        if [ -z "$1$2" ]; then
            log_check "whether $CC works"
        elif [ -z "$1" ]; then
            log_check "for $2"
        else
            log_check "for $1"
        fi
    elif [ -z "$1" ]; then
        log_check "whether $CC supports $3"
    else
        log_check "for $3 in $1";
    fi
    rm -f conftest.c
    echo "#include <stdio.h>" > conftest.c
    echo "#include <stdint.h>" >> conftest.c
    [ -n "$1" ] && echo "#include <$1>" >> conftest.c
    echo "int main () { $3 return 0; }" >> conftest.c
    if $CC conftest.c $CFLAGS $2 $LDFLAGSCLI $LDFLAGS -o conftest >conftest.log 2>&1; then
        res=$?
        log_ok
    else
        res=$?
        log_fail
        log_msg "Failed commandline was:"
        log_msg "--------------------------------------------------"
        log_msg "$CC conftest.c $CFLAGS $2 $LDFLAGSCLI $LDFLAGS"
        cat conftest.log >> config.log
        log_msg "--------------------------------------------------"
    fi
    rm conftest.c conftest.o conftest 2>/dev/null
    return $res
}

cpp_check() {
    log_check "whether $3 is true"
    rm -f conftest.c
    echo "#include <stdio.h>" > conftest.c
    echo "#include <stdint.h>" >> conftest.c
    [ -n "$1" ] && echo "#include <$1>" >> conftest.c
    echo -e "#if !($3) \n#error $4 \n#endif " >> conftest.c

    if $CC conftest.c $CFLAGS $2 -E -o conftest >conftest.log 2>&1; then
        res=$?
        log_ok
    else
        res=$?
        log_fail
        log_msg "--------------------------------------------------"
        cat conftest.log >> config.log
        log_msg "--------------------------------------------------"
    fi
    rm conftest.c conftest.o conftest 2>/dev/null
    return $res
}

cxx_check() {
    if [ -z "$3" ]; then
        if [ -z "$1$2" ]; then
            log_check "whether $CXX works"
        elif [ -z "$1" ]; then
            log_check "for $2"
        else
            log_check "for $1"
        fi
    elif [ -z "$1" ]; then
        log_check "whether $CXX supports $3"
    else
        log_check "for $3 in $1";
    fi
    rm -f conftest.c
    echo "#include <stdio.h>" > conftest.c
    echo "#include <stdint.h>" >> conftest.c
    [ -n "$1" ] && echo "#include <$1>" >> conftest.c
    echo "int main () { $3 return 0; }" >> conftest.c
    if $CXX conftest.c $CXXFLAGS $2  -o conftest >conftest.log 2>&1; then
        res=$?
        log_ok
    else
        res=$?
        log_fail
        log_msg "Failed commandline was:"
        log_msg "--------------------------------------------------"
        log_msg "$CXX conftest.c $CXXFLAGS $2 $LDFLAGSCLI $LDFLAGS"
        cat conftest.log >> config.log
        log_msg "--------------------------------------------------"
    fi
    rm conftest.c conftest.o conftest 2>/dev/null
    return $res
}

as_check() {
    log_check "whether $AS supports $1"
    echo "$1" > conftest.asm
    if $AS conftest.asm $ASFLAGS $2 -o conftest.o >conftest.log 2>&1; then
        res=$?
        log_ok
    else
        res=$?
        log_fail
        log_msg "Failed commandline was:"
        log_msg "--------------------------------------------------"
        log_msg "$AS conftest.asm $ASFLAGS $2 -o conftest.o"
        cat conftest.log >> config.log
        log_msg "--------------------------------------------------"
        log_msg "Failed program was:"
        log_msg "--------------------------------------------------"
        cat conftest.asm >> config.log
        log_msg "--------------------------------------------------"
    fi
    rm conftest.asm >/dev/null
    return $res
}

define() {
    echo "#define $1$([ -n "$2" ] && echo " $2" || echo " 1")" >> config.h
}

die() {
    log_msg "DIED: $@"
    echo "$@"
    exit 1
}

rm -f config.h config.mak config.log

SRCPATH="$(cd $(dirname $0); pwd)"
[ "$SRCPATH" = "$(pwd)" ] && SRCPATH=.
[ -n "$(echo $SRCPATH | grep ' ')" ] && die "Out of tree builds are impossible with whitespace in source path."
[ -e "$SRCPATH/config.h" -o -e "$SRCPATH/x264_config.h" ] && die "Out of tree builds are impossible with config.h/x264_config.h in source dir."

prefix='/usr/local'
exec_prefix='${prefix}'
bindir='${exec_prefix}/bin'
libdir='${exec_prefix}/lib'
includedir='${prefix}/include'
DEVNULL='/dev/null'

asm="auto"
debug="no"
libx264="auto"
lmpegts="auto"
pthread="auto"
ltwolame="auto"
swscale="auto"
pic="no"
avresample="auto"
lavf="auto"
readline="auto"
decklink="auto"
lzvbi="auto"
lopenfec="auto"
upipe="auto"

CFLAGS="$CFLAGS -Wall -I."
CXXFLAGS="$CXXFLAGS -c -Wall -I."
LDFLAGS="$LDFLAGS"
LDFLAGSCLI="$LDFLAGSCLI"
ASFLAGS="$ASFLAGS"
cross_prefix=""

EXE=""

# parse options

for opt do
    optarg="${opt#*=}"
    case "$opt" in
        --prefix=*)
            prefix="$optarg"
            ;;
        --exec-prefix=*)
            exec_prefix="$optarg"
            ;;
        --bindir=*)
            bindir="$optarg"
            ;;
        --libdir=*)
            libdir="$optarg"
            ;;
        --includedir=*)
            includedir="$optarg"
            ;;

# stuff here
        --disable-decklink)
            decklink="no"
            ;;
        --disable-lavf)
            lavf="no"
            ;;
        --disable-libtwolame)
            ltwolame="no"
            ;;
        --extra-asflags=*)
            ASFLAGS="$ASFLAGS ${opt#--extra-asflags=}"
            ;;
        --extra-cflags=*)
            CFLAGS="$CFLAGS ${opt#--extra-cflags=}"
            ;;
        --extra-cxxflags=*)
            CXXFLAGS="$CXXFLAGS ${opt#--extra-cxxflags=}"
            ;;
        --extra-ldflags=*)
            LDFLAGS="$LDFLAGS ${opt#--extra-ldflags=}"
            ;;
        --enable-debug)
            debug="yes"
            ;;
        --host=*)
            host="${opt#--host=}"
            ;;
        --cross-prefix=*)
            cross_prefix="${opt#--cross-prefix=}"
            ;;
        --sysroot=*)
            CFLAGS="$CFLAGS --sysroot=${opt#--sysroot=}"
            CXXFLAGS="$CXXFLAGS --sysroot=${opt#--sysroot=}"
            LDFLAGS="$LDFLAGS --sysroot=${opt#--sysroot=}"
            ;;
        --enable-pic)
            pic="yes"
        ;;
        *)
            echo "Unknown option $opt, ignored"
            ;;
    esac
done

CC="${CC-${cross_prefix}gcc}"
CXX="${CXX-${cross_prefix}g++}"
AR="${AR-${cross_prefix}ar}"
RANLIB="${RANLIB-${cross_prefix}ranlib}"
STRIP="${STRIP-${cross_prefix}strip}"

if [ "x$host" = x ]; then
    host=`./config.guess`
fi
# normalize a triplet into a quadruplet
host=`./config.sub $host`

# split $host
host_cpu="${host%%-*}"
host="${host#*-}"
host_vendor="${host%%-*}"
host_os="${host#*-}"

case $host_os in
  beos*)
    SYS="BEOS"
    define HAVE_MALLOC_H
    ;;
  darwin*)
    SYS="MACOSX"
    CFLAGS="$CFLAGS -falign-loops=16"
    LDFLAGS="$LDFLAGS -lm"
    if [ "$pic" = "no" ]; then
        cc_check "" -mdynamic-no-pic && CFLAGS="$CFLAGS -mdynamic-no-pic"
    fi
    ;;
  freebsd*)
    SYS="FREEBSD"
    LDFLAGS="$LDFLAGS -lm"
    ;;
  kfreebsd*-gnu)
    SYS="FREEBSD"
    define HAVE_MALLOC_H
    LDFLAGS="$LDFLAGS -lm"
    ;;
  netbsd*)
    SYS="NETBSD"
    LDFLAGS="$LDFLAGS -lm"
    ;;
  openbsd*)
    SYS="OPENBSD"
    LDFLAGS="$LDFLAGS -lm"
    ;;
  *linux*)
    SYS="LINUX"
    define HAVE_MALLOC_H
    LDFLAGS="$LDFLAGS -lm -lrt"
    ;;
  cygwin*)
    SYS="MINGW"
    EXE=".exe"
    DEVNULL="NUL"
    if cc_check "" -mno-cygwin; then
        CFLAGS="$CFLAGS -mno-cygwin"
        LDFLAGS="$LDFLAGS -mno-cygwin"
    fi
    ;;
  mingw*)
    SYS="MINGW"
    EXE=".exe"
    DEVNULL="NUL"
    ;;
  sunos*|solaris*)
    SYS="SunOS"
    define HAVE_MALLOC_H
    LDFLAGS="$LDFLAGS -lm"
    ;;
  *)
    die "Unknown system $host, edit the configure"
    ;;
esac

case $host_cpu in
  i*86)
    ARCH="X86"
    AS="yasm"
    ASFLAGS="$ASFLAGS -O2"
    if [[ "$asm" == auto && "$CFLAGS" != *-march* ]]; then
      CFLAGS="$CFLAGS -march=i686"
    fi
    if [[ "$asm" == auto && "$CFLAGS" != *-mfpmath* ]]; then
      CFLAGS="$CFLAGS -mfpmath=sse -msse"
    fi
    if [ "$SYS" = MACOSX ]; then
      ASFLAGS="$ASFLAGS -f macho -DPREFIX"
    elif [ "$SYS" = MINGW ]; then
      ASFLAGS="$ASFLAGS -f win32 -DPREFIX"
      LDFLAGS="$LDFLAGS -Wl,--large-address-aware"
    else
      ASFLAGS="$ASFLAGS -f elf"
    fi
    ;;
  x86_64)
    ARCH="X86_64"
    AS="yasm"
    if [ "$SYS" = MACOSX ];then
      ASFLAGS="$ASFLAGS -f macho64 -m amd64 -DPIC -DPREFIX"
      if cc_check '' "-arch x86_64"; then
        CFLAGS="$CFLAGS -arch x86_64"
        LDFLAGS="$LDFLAGS -arch x86_64"
      fi
    elif [ "$SYS" = MINGW ]; then
      ASFLAGS="$ASFLAGS -f win32 -m amd64"
      cc_check "" "-S" && grep -q "_main:" conftest && ASFLAGS="$ASFLAGS -DPREFIX"
    else
      ASFLAGS="$ASFLAGS -f elf -m amd64"
    fi
    ;;
  powerpc|powerpc64)
    ARCH="PPC"
    if [ $asm = auto ] ; then
      define HAVE_ALTIVEC
      AS="${AS-${cross_prefix}gcc}"
      if [ $SYS = MACOSX ] ; then
        CFLAGS="$CFLAGS -faltivec -fastf -mcpu=G4"
      else
        CFLAGS="$CFLAGS -maltivec -mabi=altivec"
        define HAVE_ALTIVEC_H
      fi
    fi
    ;;
  sparc)
    if [ $asm = auto ] && test "$(uname -m)" = "sun4u"; then
      ARCH="UltraSparc"
      CFLAGS="$CFLAGS -mcpu=ultrasparc"
      LDFLAGS="$LDFLAGS -mcpu=ultrasparc"
      AS="${AS-${cross_prefix}as}"
      ASFLAGS="$ASFLAGS -xarch=v8plusa"
    else
      ARCH="Sparc"
    fi
    ;;
  mips|mipsel|mips64|mips64el)
    ARCH="MIPS"
    ;;
  arm*)
    ARCH="ARM"
    if [ "$SYS" = MACOSX ] ; then
      AS="${AS-extras/gas-preprocessor.pl $CC}"
      ASFLAGS="$ASFLAGS -DPREFIX -DPIC"  # apple's ld doesn't support movw/movt relocations at all
      # build for armv7 by default
      if ! echo $CFLAGS | grep -Eq '\-arch' ; then
        CFLAGS="$CFLAGS -arch armv7"
        LDFLAGS="$LDFLAGS -arch armv7"
      fi
    else
      AS="${AS-${cross_prefix}gcc}"
    fi
    ;;
  s390|s390x)
    ARCH="S390"
    ;;
  parisc|parisc64)
    ARCH="PARISC"
    ;;
  ia64)
    ARCH="IA64"
    ;;
  *)
    ARCH="$(echo $host_cpu | tr a-z A-Z)"
    ;;
esac

log_msg "OBE configure script"
if [ -n "$*" ]; then
    msg="Command line options:"
    for i in $@; do
        msg="$msg \"$i\""
    done
    log_msg "$msg"
fi
log_msg ""

# check requirements

cc_check || die "No working C compiler found."

if cc_check '' -std=gnu99 ; then
    CFLAGS="$CFLAGS -std=gnu99"
elif cc_check '' -std=c99 ; then
    CFLAGS="$CFLAGS -std=c99 -D_POSIX_C_SOURCE=200112L -D_BSD_SOURCE"
fi

if [ $asm = auto -a \( $ARCH = X86 -o $ARCH = X86_64 \) ] ; then
    if ! as_check "vpaddw xmm0, xmm0, xmm0" ; then
        VER=`($AS --version || echo no assembler) 2>/dev/null | head -n 1`
        echo "Found $VER"
        echo "Minimum version is yasm-0.7.0"
        echo "If you really want to compile without asm, configure with --disable-asm."
        exit 1
    fi
    if ! cc_check '' '' '__asm__("pabsw %xmm0, %xmm0");' ; then
        VER=`(${cross_prefix}as --version || echo no gnu as) 2>/dev/null | head -n 1`
        echo "Found $VER"
        echo "Minimum version is binutils-2.17"
        echo "Your compiler can't handle inline SSSE3 asm."
        echo "If you really want to compile without asm, configure with --disable-asm."
        exit 1
    fi
    define HAVE_MMX
fi

[ $asm = no ] && AS=""
[ "x$AS" = x ] && asm="no" || asm="yes"

define ARCH_$ARCH
define SYS_$SYS

# autodetect options that weren't forced nor disabled

libpthread=""
if test "$pthread" = "auto" ; then
    pthread="no"
    case $SYS in
        BEOS)
            pthread="yes"
            ;;
        MINGW)
            if cc_check pthread.h -lpthread "pthread_create(0,0,0,0);" ; then
                pthread="yes"
                libpthread="-lpthread"
            elif cc_check pthread.h -lpthreadGC2 "pthread_create(0,0,0,0);" ; then
                pthread="yes"
                libpthread="-lpthreadGC2"
            elif cc_check pthread.h "-lpthreadGC2 -lwsock32 -DPTW32_STATIC_LIB" "pthread_create(0,0,0,0);" ; then
                pthread="yes"
                libpthread="-lpthreadGC2 -lwsock32"
                define PTW32_STATIC_LIB
            elif cc_check pthread.h "-lpthreadGC2 -lws2_32 -DPTW32_STATIC_LIB" "pthread_create(0,0,0,0);" ; then
                pthread="yes"
                libpthread="-lpthreadGC2 -lws2_32"
                define PTW32_STATIC_LIB
            fi
            ;;
        OPENBSD)
            cc_check pthread.h -pthread && pthread="yes" && libpthread="-pthread"
            ;;
        *)
            cc_check pthread.h -lpthread && pthread="yes" && libpthread="-lpthread"
            ;;
    esac
fi
if test "$pthread" = "yes" ; then
    define HAVE_PTHREAD
    LDFLAGS="$LDFLAGS $libpthread"
else
    die "pthread is a mandatory component"
fi

if [ "$libx264" = "auto" ] ; then
    libx264="no"
    libx264flags="-lx264"
    if cc_check "x264.h" "$libpthread $libx264flags" "x264_encoder_close(0);" ; then
        if cpp_check x264.h "$libpthread $libx264flags" "X264_BUILD >= 99" ; then
            libx264="yes"
            define HAVE_LIBX264
            LDFLAGS="$LDFLAGS $libx264flags"
        else
            die "libx264 is too old"
        fi
    fi
fi

if [ "$libx264" = "no" ] ; then
    die "libx264 is a mandatory component"
fi

if [ "$ltwolame" = "auto" ] ; then
    ltwolame="no"
    ltwolameflags="-ltwolame"
    if cc_check "twolame.h" $ltwolameflags "twolame_init();" ; then
        ltwolame="yes"
    fi
fi

if [ "$ltwolame" = "yes" ] ; then
    define HAVE_LIBTWOLAME
    LDFLAGS="$LDFLAGS $ltwolameflags" # fixme cflags too?
fi

if [ "$swscale" = "auto" ] ; then
    swscale="no"
    if ${cross_prefix}pkg-config --exists libswscale 2>/dev/null; then
        SWSCALE_LIBS="$SWSCALE_LIBS $(${cross_prefix}pkg-config --libs libswscale libavutil)"
        SWSCALE_CFLAGS="$SWSCALE_CFLAGS $(${cross_prefix}pkg-config --cflags libswscale libavutil)"
    fi
    [ -z "$SWSCALE_LIBS" ] && SWSCALE_LIBS="-lswscale -lavutil"

    if cc_check "libswscale/swscale.h" "$SWSCALE_CFLAGS $SWSCALE_LIBS" "sws_init_context(0,0,0);" ; then
        if cc_check "libavutil/pixdesc.h" "$SWSCALE_CFLAGS $SWSCALE_LIBS" "av_get_pix_fmt_name(0);" ; then
            swscale="yes"
        else
            echo "Warning: av_get_pix_fmt_name is missing from libavutil, update for swscale support"
        fi
    fi
fi

if [ "$avresample" = "auto" ] ; then
    avresample="no"
    if ${cross_prefix}pkg-config --exists libavresample 2>/dev/null; then
        AVRESAMPLE_LIBS="$AVRESAMPLE_LIBS $(${cross_prefix}pkg-config --libs libavresample libavutil)"
        AVRESAMPLE_CFLAGS="$AVRESAMPLE_CFLAGS $(${cross_prefix}pkg-config --cflags libavresample libavutil)"
        avresample="yes"
    fi
    [ -z "$AVRESAMPLE_LIBS" ] && AVRESAMPLE_LIBS="-lavresample -lavutil"
fi

if [ "$lavf" = "auto" ] ; then
    lavf="no"
    if ${cross_prefix}pkg-config --exists libavformat libavcodec libswscale libavfilter 2>/dev/null; then
        LAVF_LIBS="$LAVF_LIBS $(${cross_prefix}pkg-config --libs libavformat libavcodec libavresample libavutil libswscale libavfilter)"
        LAVF_CFLAGS="$LAVF_CFLAGS $(${cross_prefix}pkg-config --cflags libavformat libavcodec libavresample libavutil libswscale libavfilter)"
    fi
    if [ -z "$LAVF_LIBS" -a -z "$LAVF_CFLAGS" ]; then
        LAVF_LIBS="-lavformat"
        for lib in -lavcodec -lswscale -lavutil -lavresample -lavfilter -lm -lz -lbz2 $libpthread -lavifil32; do
            cc_check "" $lib && LAVF_LIBS="$LAVF_LIBS $lib"
        done
    fi
    LAVF_LIBS="-L. $LAVF_LIBS"
    if cc_check libavformat/avformat.h "$LAVF_CFLAGS $LAVF_LIBS" "avformat_find_stream_info(0,0); avcodec_open2(0,0,0);" ; then
        if [ "$swscale" = "yes" ]; then
            lavf="yes"
        else
            echo "Warning: libavformat is not supported without swscale support"
        fi
    fi
fi

if [ "$lavf" = "yes" ]; then
    LDFLAGS="$LAVF_LIBS $LDFLAGS"
    CFLAGS="$CFLAGS $LAVF_CFLAGS"
elif [ "$swscale" = "yes" ]; then
    LDFLAGS="$SWSCALE_LIBS $LDFLAGS"
    CFLAGS="$CFLAGS $SWSCALE_CFLAGS"
    if [ "$lavresample" = "yes" ]; then
        LDFLAGS="$AVRESAMPLE_LIBS $LDFLAGS"
        CFLAGS="$CFLAGS $AVRESAMPLE_CFLAGS"
    fi
fi

if [ "$lavf" = "no" ] ; then
    die "libavformat is a mandatory component"
fi

if [ "$swscale" = "no" ] ; then
    die "libswscale is a mandatory component"
fi

if [ "$avresample" = "no" ] ; then
    die "libavresample is a mandatory component"
fi

if [ "$readline" = "auto" ] ; then
    readline="no"
    readlineflags="-lreadline"
    if cc_check "readline/readline.h" "$readlineflags" "rl_initialize();" ; then
        readline="yes"
        define HAVE_READLINE
        LDFLAGSCLI="$readlineflags"
    fi
    readlineflags="-lncurses -lreadline"
    if cc_check "readline/readline.h" "$readlineflags" "rl_initialize();" ; then
        readline="yes"
        define HAVE_READLINE
        LDFLAGSCLI="$readlineflags"
    fi
fi

if [ "$readline" = "no" ] ; then
    die "readline is a mandatory component"
fi

LMPEGTS_LIBS="-lmpegts"
if [ "$lmpegts" = "auto" ] ; then
    lmpegts="no"
    if cc_check libmpegts.h "$LMPEGTS_LIBS" ; then
        lmpegts="yes"
    fi
fi

if [ "$lmpegts" = "yes" ] ; then
    define HAVE_LIBMPEGTS
    LDFLAGS="$LDFLAGS $LMPEGTS_LIBS"
else
    die "libmpegts is a mandatory component"
fi

if [ "$decklink" = "auto" ] ; then
    decklink="no"
    decklinkflags="-lDeckLinkAPI"
    if cc_check "" "$decklinkflags" "" ; then
        decklink="yes"
    fi
fi

DECKLINK_CXXFLAGS="-lavformat -lavcodec -lswscale -lavutil $libpthread -ldl "
DECKLINK_LIBS="-lstdc++ -ldl"
if [ "$decklink" = "yes" ] ; then
    define HAVE_DECKLINK
    CXXFLAGS="$CXXFLAGS $DECKLINK_CXXFLAGS"
    LDFLAGS="$LDFLAGS $DECKLINK_LIBS"
fi

LZVBI_LIBS="-lzvbi"
if [ "$lzvbi" = "auto" ] ; then
    lzvbi="no"
    if cc_check libzvbi.h "$LZVBI_LIBS" ; then
        lzvbi="yes"
    fi
fi

if [ "$lzvbi" = "yes" ] ; then
    define HAVE_LIBZVBI
    LDFLAGS="$LDFLAGS $LZVBI_LIBS"
fi

LOPENFEC_LIBS="-lopenfec"
if [ "$lopenfec" = "auto" ] ; then
    lopenfec="no"
    if cc_check "openfec/lib_common/of_openfec_api.h" "$LOPENFEC_LIBS" ; then
        lopenfec="yes"
    fi
fi

if [ "$lopenfec" = "yes" ] ; then
    define HAVE_LIBOPENFEC
    LDFLAGS="$LDFLAGS $LOPENFEC_LIBS"
fi

UPIPE_MODULES="libupump_ev libupipe_netmap libupipe_hbrmt libupipe_pthread libupipe_modules libupipe"
if [ "$upipe" = "auto" ] ; then
    upipe="no"
    if ${cross_prefix}pkg-config --libs ${UPIPE_MODULES} 2>/dev/null; then
        UPIPE_LIBS="$UPIPE_LIBS $(${cross_prefix}pkg-config --libs ${UPIPE_MODULES})"
        UPIPE_CFLAGS="$UPIPE_CFLAGS $(${cross_prefix}pkg-config --cflags ${UPIPE_MODULES})"
        upipe="yes"
    fi
fi

if [ "$upipe" = "yes" ]; then
    LDFLAGS="$UPIPE_LIBS $LDFLAGS"
    CFLAGS="$CFLAGS $UPIPE_CFLAGS"
    CXXFLAGS="$CXXFLAGS $UPIPE_CFLAGS"
fi


if [ "$pic" = "yes" ] ; then
    CFLAGS="$CFLAGS -fPIC"
    ASFLAGS="$ASFLAGS -DPIC"
    # resolve textrels in the x86 asm
    cc_check stdio.h -Wl,-Bsymbolic && LDFLAGS="$LDFLAGS -Wl,-Bsymbolic"
fi

if [ "$debug" != "yes" ]; then
    CFLAGS="$CFLAGS -s -fomit-frame-pointer"
    LDFLAGS="$LDFLAGS -s"
fi

if [ "$debug" = "yes" ]; then
    CFLAGS="-O1 -g $CFLAGS"
elif [ $ARCH = ARM ]; then
    # arm-gcc-4.2 produces incorrect output with -ffast-math
    # and it doesn't save any speed anyway on 4.4, so disable it
    CFLAGS="-O3 -fno-fast-math $CFLAGS"
else
    CFLAGS="-O3 -ffast-math $CFLAGS"
    CXXFLAGS="-O3 -ffast-math $CXXFLAGS"
fi

if cc_check '' -fno-tree-vectorize ; then
    CFLAGS="$CFLAGS -fno-tree-vectorize"
fi

if [ $SYS = MINGW -a $ARCH = X86 ] ; then
    # workaround gcc/ld bug with alignment of static variables/arrays that are initialized to zero
    cc_check '' -fno-zero-initialized-in-bss && CFLAGS="$CFLAGS -fno-zero-initialized-in-bss"
fi

if cc_check "stdio.h" "" "fseeko(stdin,0,0);" ; then
    define fseek fseeko
    define ftell ftello
elif cc_check "stdio.h" "" "fseeko64(stdin,0,0);" ; then
    define fseek fseeko64
    define ftell ftello64
fi

if cc_check '' -Wshadow ; then
    CFLAGS="-Wshadow $CFLAGS"
fi

# generate config files

cat > config.mak << EOF
SRCPATH=$SRCPATH
prefix=$prefix
exec_prefix=$exec_prefix
bindir=$bindir
libdir=$libdir
includedir=$includedir
ARCH=$ARCH
SYS=$SYS
CC=$CC
CXX=$CXX
CFLAGS=$CFLAGS
CXXFLAGS=$CXXFLAGS
LDFLAGS=$LDFLAGS
LDFLAGSCLI=$LDFLAGSCLI
AR=$AR
RANLIB=$RANLIB
STRIP=$STRIP
AS=$AS
ASFLAGS=$ASFLAGS
EXE=$EXE
EOF

# FIXME
#./version.sh >> config.h

cat > conftest.log <<EOF

System Information

Platform:   $ARCH
System:     $SYS
asm:        $asm

Input

decklink:   $decklink
libzvbi:    $lzvbi
upipe:      $upipe

Audio/Video Decoding

lavf:       $lavf

Filters

swscale:    $swscale
avresample: $avresample

Audio Encoders

libtwolame: $ltwolame

Mux

libmpegts:  $lmpegts

Output

openfec:    $lopenfec

Frontends

readline:   $readline

EOF

echo >> config.log
cat conftest.log >> config.log
cat conftest.log
rm conftest.log

echo
echo "You can run 'make' now."

